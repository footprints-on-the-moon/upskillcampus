# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JxsvlXPxmWzMopTRZvYLgRhkqCd4P_QY
"""

import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset
data = {
    'Crop': ['Rice', 'Wheat', 'Coarse Cereals', 'Pulses', 'Vegetables', 'Fruits', 'Milk', 'Eggs, Fish and Meat', 'Oilseeds', 'Sugarcane', 'Fibers', 'All Agriculture'],
    '2004-05': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
    '2005-06': [101, 101, 107, 108, 109, 99, 97, 102, 86, 96, 92, 99],
    '2006-07': [99, 112, 110, 134, 103, 99, 98, 101, 85, 91, 91, 101],
    '2007-08': [105, 115, 115, 124, 118, 98, 98, 100, 97, 87, 96, 104],
    '2008-09': [112, 117, 113, 124, 113, 102, 98, 99, 104, 80, 109, 106],
    '2009-10': [121, 127, 123, 146, 124, 104, 112, 116, 103, 81, 107, 115],
    '2010-11': [117, 120, 122, 137, 128, 114, 123, 133, 99, 109, 138, 123],
    '2011-12': [110, 108, 136, 129, 115, 119, 124, 137, 102, 107, 140, 122]
}

df = pd.DataFrame(data)

# Transpose the DataFrame so that crops are rows and years are columns
df = df.set_index('Crop').T

# Convert index to datetime
df.index = pd.to_datetime(df.index)

# Split data into train and test sets
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]

# Define a dictionary to store RMSE values for each crop
rmse_dict = {}

# Iterate over each crop and train an ARIMA model
for crop in df.columns:
    # Define and fit the ARIMA model
    model = ARIMA(train[crop], order=(5,1,0))
    model_fit = model.fit()

    # Make predictions
    predictions = model_fit.forecast(steps=len(test))

    # Evaluate predictions
    mse = mean_squared_error(test[crop], predictions)
    rmse = np.sqrt(mse)
    rmse_dict[crop] = rmse

    # Plot actual vs predicted values
    plt.figure(figsize=(10, 5))
    plt.plot(test.index, test[crop], label='Actual')
    plt.plot(test.index, predictions, label='Predicted')
    plt.title(f'Actual vs Predicted {crop} Yields')
    plt.xlabel('Year')
    plt.ylabel('Yield')
    plt.legend()
    plt.show()

# Print RMSE values for each crop
print("RMSE for each crop:")
for crop, rmse in rmse_dict.items():
    print(f"{crop}: {rmse}")

